import io from "socket.io-client/dist/socket.io";
import nanoid from "nanoid";

function makeSocketRequester (socket, timeout) {
  const awaitingResponse = {};

  socket.on("response", (responseId, err, data) => {
    console.log("[response]", responseId, data);
    const waiter = awaitingResponse[responseId];

    if (!waiter) {
      return console.warn("[response] unhandled", responseId, data);
    }

    if (err) {
      waiter.reject(err);
    } else {
      waiter.resolve(data);
    }

    clearTimeout(waiter.timeout);
    delete awaitingResponse[responseId];makeSocketRequester
  });

  return function request (messageName, data) {
    const responseId = `${messageName}__${nanoid()}`;

    const waiter = awaitingResponse[responseId] = {};

    const promise = new Promise ((resolve, reject) => {
      waiter.resolve = resolve;
      waiter.reject = reject;
    });

    socket.emit(messageName, responseId, data);

    waiter.timeout = setTimeout(() => {
      if (responseId in awaitingResponse) {
        console.error("[request] timeout", responseId);
        awaitingResponse[responseId].reject("TIMEOUT");
        delete awaitingResponse[responseId];
      }
    }, timeout);

    console.log("[request]", responseId, data);
    return promise;
  };
}

export default (config = {}) => {
  const {
    uri = "http://localhost:4000",
    timeout = 5000,
  } = config;

  const socket = io(uri);

  socket.request = makeSocketRequester(socket, timeout);

  socket.on("error", function error(err) {
    console.error("Something horrible has happened", err.stack);
  });

  socket.on("open", function open() {
    console.log("Connection is alive and kicking");
    socket.emit("message", "hello");
  });

  socket.on("reconnected", function (opts) {
    console.log("It took %d ms to reconnect", opts.duration);
  });

  return socket;
}
